
name: Docker images

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.target }} + ${{ matrix.image }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ "stable", "latest" ]
        image:
          - "alpine"
          - "amazon-2-amd64"
          - "arch"
          - "centos-7-amd64"
          - "centos-8-amd64"
          - "debian-10-buster-x86"
          - "fedora-32-amd64"
          - "fedora-33-amd64"
          - "ubuntu-18.04-bionic-amd64"
          - "ubuntu-20.04-focal-amd64"
          - "ubuntu-20.04-focal-amd64-valgrind"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Prepare build
        run: |
          sudo apt-get update && sudo apt-get install -qyy debootstrap
          if [ "${{ matrix.target }}" = "latest" ]; then
            git submodule update --remote Pillow
            (cd Pillow && git checkout master)
          fi
          sudo chown -R 1000 $(pwd)

      - name: Build image
        id: build
        run: |
          cd "${{ matrix.image }}" && sudo chmod a+w . && make update
          if [[ -n "$DOCKER_USERNAME" ]]; then
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin && echo "::set-output name=logged_in::true"
          fi
          make build BRANCH=master && make test BRANCH=master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log image size
        run: |
          docker images

      - name: Push image
        if: "steps.build.outputs.logged_in == 'true'
                           && github.event_name == 'push'
                           && github.ref == 'refs/heads/master'
                           && matrix.target == 'stable'"
        run: make push-${{ matrix.image }} BRANCH=master

      - name: Post build
        if: always()
        run: sudo chown -R $(id -u) $(pwd)

  success:
    needs: build
    runs-on: ubuntu-latest
    name: Build successful
    steps:
      - name: Success
        run: echo Build Successful
